name: MicroPython Firmware

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  MICROPYTHON_VERSION: v1.23.0
  WORKFLOW_VERSION: 0

jobs:
  deps:
    runs-on: ubuntu-20.04
    name: Dependencies
    steps:
    - name: Workspace Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    # Check out MicroPython
    - name: Checkout MicroPython
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: micropython/micropython
        ref: ${{env.MICROPYTHON_VERSION}}
        submodules: false  # MicroPython submodules are hideously broken
        path: micropython

    - name: Fetch base MicroPython submodules
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython
      run: git submodule update --init

    - name: Fetch Pico SDK submodules
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/lib/pico-sdk
      run: git submodule update --init

    - name: Build mpy-cross
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/mpy-cross
      run: make

  build:
    needs: deps
    name: Build ${{matrix.name}}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: PicoSystem
            shortname: picosystem
            board: PIMORONI_PICOSYSTEM

    env:
      RELEASE_FILE: pimoroni-${{matrix.shortname}}-${{github.event.release.tag_name || github.sha}}-micropython.uf2
      RELEASE_FILE_WITH_OS: pimoroni-${{matrix.shortname}}-${{github.event.release.tag_name || github.sha}}-micropython-with-examples.uf2
      BOARD_DIR: "$GITHUB_WORKSPACE/picosystem/micropython/${{matrix.board}}"
      EXAMPLES_DIR: "$GITHUB_WORKSPACE/picosystem/micropython/examples/picosystem"
      C_MODULES_DIR: "$GITHUB_WORKSPACE/picosystem/micropython/modules"

    steps:
    - name: Compiler Cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.ccache
        key: ccache-micropython-${{matrix.shortname}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-micropython-${{matrix.shortname}}-${{github.ref}}
          ccache-micropython-${{matrix.shortname}}-

    - name: Workspace Cache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    - name: Check out PicoSystem
      uses: actions/checkout@v4
      with:
        submodules: true
        path: picosystem

    # Check out Pimoroni Pico
    - name: Check out Pimoroni Pico
      uses: actions/checkout@v4
      with:
        repository: pimoroni/pimoroni-pico
        submodules: true
        path: pimoroni-pico

    # Check out dir2u2f
    - name: Check out dir2uf2
      uses: actions/checkout@v4
      with:
        repository: gadgetoid/dir2uf2
        ref: v0.0.4
        path: dir2uf2

    - name: "HACK: Overclock & Overvolt Patch"
      shell: bash
      working-directory: micropython
      run: git apply $GITHUB_WORKSPACE/picosystem/micropython/overclock_and_overvolt.patch

    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '9-2020-q2'

    # Install apt packages
    - name: Install CCache
      shell: bash
      run:
        sudo apt update && sudo apt install ccache

    # Build firmware
    - name: Configure MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        cmake -S . -B build -DPICO_BUILD_DOCS=0 -DUSER_C_MODULES=${{env.C_MODULES_DIR}}/micropython.cmake -DMICROPY_BOARD_DIR=${{env.BOARD_DIR}} -DMICROPY_BOARD= -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ccache --zero-stats || true
        cmake --build build -j 2
        ccache --show-stats || true

    - name: Rename .uf2 for artifact
      shell: bash
      working-directory: micropython/ports/rp2/build
      run: |
        cp firmware.uf2 ${{env.RELEASE_FILE}}

    - name: Append Filesystem
      shell: bash
      run: |
        python3 -m pip install littlefs-python==0.4.0
        ./dir2uf2/dir2uf2 --append-to micropython/ports/rp2/build/${{env.RELEASE_FILE}} --manifest ${{env.BOARD_DIR}}/uf2-manifest.txt --filename with-examples.uf2 ${{env.EXAMPLES_DIR}}/

    - name: Store .uf2 as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE}}
        path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}

    - name: Store .uf2 + Examples as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE_WITH_OS}}
        path: ${{env.RELEASE_FILE_WITH_OS}}

    - name: Upload .uf2
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}
        asset_content_type: application/octet-stream

    - name: Upload .uf2 + Examples
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{env.RELEASE_FILE_WITH_OS}}
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE_WITH_OS}}
        asset_content_type: application/octet-stream
